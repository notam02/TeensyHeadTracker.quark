TITLE:: TeensyHeadTracker
summary:: A convenient interface for the Teensy Head Tracker
categories:: Extensions
related:: Classes/Quarks, Classes/AtkHoa, Guides/Format-Exchange

DESCRIPTION::

This class is a convenient interface that makes it easy to use the LINK::https://github.com/notam02/Teensy-Head-Tracker##TeensyHeadTracker::, a DIY head tracker for 3D audio production.

It is an abstraction that takes care of three things:

LIST::
	## finds the Teensy-Head-Tracker midi controller and connects SuperCollider to it + sets up responder functions
	## adds and spawns a binaural decoder and scene rotator at the main output of SuperCollider. When the user presses ctrl/cmd-period to hardstop the sound, the output synth is automatically respawned. The user may choose between a native ATK decoder process.
	## connects the midi controller to a scene rotator prior to the binaural decoder to allow the user to rotate it's head inside of the scene.
::

It is assumed that you use ATK to create ambisonics in SuperCollider and the synth spawned at the output of SuperCollider by this class expects the ATK's HOA format at it's input.

SUBSECTION:: Dependencies
A full install of ATK is necessary for this quark to work:

CODE::
// Install dependencies for atk binaural decoder:
(
Atk.downloadMatrices;
Atk.downloadKernels;
)
::

CLASSMETHODS::

METHOD:: new

ARGUMENT::order

The ambisonics order.

ARGUMENT::cipicSubjectID
Head related impulse response used for the atk decoder. See LINK::Classes/FoaDecoderKernel#newCIPIC:: for more info.

returns:: a TeensyHeadTracker

EXAMPLES::

code::
~order = 3;
TeensyHeadTracker.new(order:~order);

// Play white noise at the front
(
Ndef(\hoa_testorientation, {|amp=0.125, freq=100, azi=0, ele=0|
 var sig = WhiteNoise.ar(amp);

 sig = HoaEncodeDirection.ar(
		 sig,
		 azi,
		 ele,
		 AtkHoa.refRadius,
		 ~order
		 );

 }).play
)

// Now change the direction of the source while you rotate your head:
Ndef(\hoa_testorientation).set(\azi, 0.5*pi);

Ndef(\hoa_testorientation).set(\azi, pi);

Ndef(\hoa_testorientation).set(\azi, 0.5*(-pi));

Ndef(\hoa_testorientation).set(\azi, -pi);

Ndef(\hoa_testorientation).set(\azi, 0);

// Now automate
Ndef(\rotator, { LFSaw.kr(\rotateFreq.kr(0.5), mul: pi) });
Ndef(\hoa_testorientation).map(\azi, Ndef(\rotator));
::
